[H1] 02 Exercise : Build AI Agent Code InterpreterIn hands-on lab, useAzure AI Agent Servicebuild agent analyzes data dynamically generates charts using built-inCode Interpretertool. ---## Table Contents1.Create Azure AI Foundry Project2.Create Agent Client App3.Configure Application Settings4.Write Code Agent App5.Sign Azure Run App6.Summary7.Clean Up---## Create Azure AI Foundry Project1. Open [ sign in.2. ClickCreate agent.3. When prompted: - Provide validProject name- ExpandAdvanced options: -Azure AI Foundry resource: resource name -Subscription: Azure subscription -Resource group: existing new -Region: supported region 4. ClickCreatewait provisioning.5. TheAgents Playgroundopen automatically.6. In left pane, clickOverview.7. Copyproject endpointsave later use.---## Create Agent Client App1. Clone provided GitHub repo:bashgit clone ai-agentscd ai-agents/Labfiles/02-build-ai-agent/Pythonls -a -l2. The folder includes: - Application code - Configuration file (.env) - Sample data file: data.txt## Configure Application Settings 1. Set Python virtual environment:bashpython -m venv labenv./labenv/Scripts/Activate.ps1pip install -r requirements.txt azure-ai-projects2. Open .env config file:bash code .env3. Replace your_project_endpoint actual Foundry project endpoint.4. Save (CTRL+S) close (CTRL+Q) editor.## Write Code Agent AppAssicurati di rispettare lindentazione corretta durante linserimento del codice.1. Apri il filebash code agent.py2. Import needed classesbashfrom azure.identity import DefaultAzureCredentialfrom azure.ai.agents import AgentsClientfrom azure.ai.agents.models import FilePurpose, CodeInterpreterTool, ListSortOrder, MessageRole3. Connect projectbashagent_client = AgentsClient( endpoint=project_endpoint, credential=DefaultAzureCredential( exclude_environment_credential=True, exclude_managed_identity_credential=True ))with agent_client:4. Upload data create Code Interpreter Toolbashfile = agent_client.files.upload_and_poll(file_path=file_path, purpose=FilePurpose.AGENTS)print(f"Uploaded {file.filename}")code_interpreter = CodeInterpreterTool(file_ids=[file.id])5. Define Agentbashagent = agent_client.create_agent( model=model_deployment, name="data-agent", instructions="You AI agent analyzes data file uploaded. If user requests chart, create save .png file.", tools=code_interpreter.definitions, tool_resources=code_interpreter.resources,)print(f"Using agent: {agent.name}")6. Create thread conversationbashthread = agent_client.threads.create()7. Send prompt Agentbashmessage = agent_client.messages.create( thread_id=thread.id, role="user", content=user_prompt,)run = agent_client.runs.create_and_process(thread_id=thread.id, agent_id=agent.id)8. Check errorsbashif run.status == "failed": print(f"Run failed: {run.last_error}")9. Retrieve last agent answerbashlast_msg = agent_client.messages.get_last_message_text_by_role( thread_id=thread.id, role=MessageRole.AGENT,)if last_msg: print(f"Last Message: {last_msg.text.value}")10. Show history conversationbashprint("\nConversation Log:\n")messages = agent_client.messages.list(thread_id=thread.id, order=ListSortOrder.ASCENDING)for message messages: message.text_messages: last_msg = message.text_messages[-1] print(f"{message.role}: {last_msg.text.value}\n")11. Download generated filesbashfor msg messages: img msg.image_contents: file_id = img.image_file.file_id file_name = f"{file_id}_image_file.png" agent_client.files.save(file_id=file_id, file_name=file_name) print(f"Saved image file to: {Path.cwd() / file_name}")12. Delete resourcesbashagent_client.delete_agent(agent.id)## Sign Azure Run App1. Autenticate yourself:bashaz login2. Esecute app:bashpython agent.py3. Insert prompt:bash"What's category highest cost?""Create pie chart showing cost category"4. Continue conversation, insert 'quit' exit.5. Download generated files .png:```bashdownload ./<file_name