[H1] 04 Develop AI agent Semantic KernelAI agents reshaping application design using generative AI interpret data, take decisions, complete tasks little human oversight. Powered large-language models, automate intricate workflows well-suited business-process automation.### Semantic Kernel SDK Agent Framework-Semantic Kernel SDKopen-source toolkit makes easy embed AI models applications.- TheAgent Frameworkbuilt Semantic Kernel supports several agent typesChatCompletionAgent, OpenAIAssistantAgent, AzureAIAgentwith module focusing AzureAIAgent.### Azure AI Foundry Agent Service- A fully managed service lets developers securely build, deploy, scale extensible AI agents without managing compute storage.- When combined Semantic Kernel Agent Framework, developers spin agents Foundry quickly, gaining natural-language capabilities access built-in tools lines code.### Why pair Semantic Kernel Foundry Agent Service?- Flexibility & scalability: Keep existing Semantic Kernel code simply add Azure AI Agent features (built-in tools, deployment pipelines).- Consistency: Use SDK manage multiple agent types one solution.- Multi-agent orchestration: Semantic Kernels GroupChat feature coordinates collaborative agentsideal complex, multi-agent scenarios.### Problem You needAI-driven process automatically extracts data submitted expense reports, formats them, e-mails finished documents right recipients. The solution must: * Operateautonomouslywithout manual oversight. *Scale securelywithout team managing compute storage resources. * Keep full conversation state follow-up questions (for example, Resend last months report HR) work seamlessly.### Solution Azure Semantic Kernel LeverageAzure AI Foundry Agent ServiceSemantic Kernel SDKspecificallyAzureAIAgentclass. #### Understand Semantic Kernel AI agentsAn AI agent program uses generative AI interpret data, make decisions, perform tasks behalf users applications. AI agents rely large language models perform tasks. Unlike conventional programs, AI agents function autonomously, handling complex workflows automating processes without requiring continuous human oversight.AI Agents developed using many different tools platforms, including Semantic Kernel SDK. Semantic Kernel open-source SDK enables developers easily integrate latest AI models applications. Part SDK includes Semantic Kernel Agent Framework, allows developers quickly create functional agents use natural language processing complete tasks.#### Semantic Kernel core components:The Semantic Kernel offers different components used individually combined.1.AI service connectors- connect code AI services different providers common interface. Supported services include Chat Completion, Text Generation, more.2.Memory connectors- expose vector stores providers common interface.3.Functions plugins- containers functions registered kernel. Once registered, functions invoked AI prompt templates.4.Prompt templates - combine instructions, user input, function outputs reusable format. Prompt templates allow AI models execute predefined steps dynamically.5.Filters- allow custom actions performed function prompt invoked. When registered, function filters act outer layers prompt filters inner layers.#### Agent framework components:The Agent Framework within Semantic Kernel helps streamline creation agents enables multi-agent collaboration conversations integrating human input. The framework supports different types agents, includingChatCompletionAgent,OpenAIAssistantAgent,AzureAIAgent.#### What Azure AI Agent?TheAzureAIAgentclass provides seamless way build interact AI agents using Foundry Agent Service. It abstracts complexity managing AI agents offering structured intuitive interface within Semantic Kernel Agent Framework. Key benefits include:-Simplified agent creationThe AzureAIAgent class allows developers define AI agents minimal configuration, leveraging power Foundry Agent Service without managing underlying infrastructure.-Automatic tool invocationThe agent automatically call execute tools, integrating seamlessly Azure AI Search, Bing, Azure Functions, more.-Thread conversation managementProvides built-in mechanisms managing conversation states, ensuring smooth multi-agent interactions.-Secure enterprise integrationEnables secure compliant AI agent development keyless authentication customizable storage options.By using AzureAIAgent class, developers take full advantage Foundry Agent Service taking advantage features offered Semantic Kernel SDK. This allows robust AI-driven workflows scale efficiently across enterprise applications.#### Agent framework core concepts:-Agent- abstraction AI agents, specialized subclasses like AzureAIAgent, allowing task completion human interaction conversations.-Agent threads- manage conversation state stores conversations.-Agent chat- foundation multi-agent interactions, allows structured conversations collaboration.-Agent channel- used custom agent development, allows different types agents participate AgentChat.-Agent messages- unified structure agent communication, provides seamless communication integration existing AI workflows.-Templating- like Semantic Kernel prompt templates, templates use dynamic prompt configurations shape agent behavior.Functions plugins - like Semantic Kernel plugins, agent plugin functions allow developers extend agent capabilities incorporating custom functions.### Required Components Azure Ai Agents | Component | Details official material ||-----------|------------------------------------||AzureAIAgentSettings| Reads model deployment name Foundry connection string environment variables. ||AzureAIAgent client| Manages connection Foundry project exposes agent operations. ||Agent service| AzureAIAgent client also contains agent operations service. This service helps streamline process creating, managing, running agents project. ||Agent definition| Declares model, agent name, instructions service. ||AzureAIAgentThread| Stores conversation history state user agent. |### How use plugin AzureAiAgent: Custom APIs exposed@kernel_functiondecorator agent call them. In Semantic Kernel, plugins allow AI agent use existing APIs perform tasks own. Plugins work function calling, allowing AI request use specific functions. Semantic Kernel routes request appropriate function codebase returns results back LLM LLM generate final response. To enable automatic orchestration function calling, plugins also need provide details describe behave. The function's input, output, side effects described way AI understand, otherwise, AI correctly call function. 1. Define pluginYou create plugin defining class annotating methods kernel_function decorator. The decorator lets Semantic Kernel know function called AI referenced prompt. The kernel_function decorator also supports description attribute help AI understand use function.2. Add plugin agentOnce define plugin, add AzureAIAgent creating new instance plugin adding agent's plugin collection.3. Invoke plugin's functionsYou invoke plugin's functions using prompts agent's message thread. For example, plugin function called get_tasks, prompt agent might "What tasks I have?".### Architecture / Development #### Create Azure AI agent Semantic KernelAzureAIAgent specialized agent within Semantic Kernel framework, designed provide advanced conversational capabilities seamless tool integration. It automates tool calling, eliminating need manual parsing invocation. The agent also securely manages conversation history using threads, reducing overhead maintaining state. The AzureAIAgent class supports many built-in tools, including file retrieval, code execution, data interaction via Bing, Azure AI Search, Azure Functions, OpenAPI.1.Create Azure AI Foundry projectrecord connection string. 2.Add project connection stringSemantic Kernel application codeAzureAIAgentSettingsload it. 3.Create AzureAIAgentSettings object.4.Create AzureAIAgent client.5.Create agent definitionagent service provided client.6.Create agent based definition. ```python azure.identity.aio import DefaultAzureCredential semantic_kernel.agents import ( AzureAIAgent, AzureAIAgentThread, AzureAIAgentSettings ) # 1. Create AzureAIAgentSettings object ai_agent_settings = AzureAIAgentSettings() # 2. Create AzureAIAgent client async (@ DefaultAzureCredential() creds, AzureAIAgent.create_client(credential=creds) client, ): # 3. Create agent definition agent service provided client agent_definition = await client.agents.create_agent( model=ai_agent_settings.model_deployment_name, name="<name