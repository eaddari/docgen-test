[H1] 04 Exercise : Develop Azure AI Agent Semantic Kernel SDK## Objective Create Azure AI Agent (via Semantic Kernel) reads expense data, e-mails itemised claim confirms completion. ## Step 1 : Deploy model Azure AI Foundry project1. Sign InExplore models capabilities, searchgpt-4ochooseUse model.3. When prompted, specifyproject name,resource,subscription,resource group,region.If later hit quota limit, recreate resource different region.4. SelectCreatewait provisioning.5. In chat playground, notedeployment name(gpt-4o) copyproject endpointOverview.## Step 2 : Create agentInstall dependencies:pythonpip install python-dotenv azure-identity semantic-kernel[azure] ``````python# 1. Add referencesfrom dotenv import load_dotenvfrom azure.identity.aio import DefaultAzureCredentialfrom semantic_kernel.agents import ( AzureAIAgent, AzureAIAgentSettings, AzureAIAgentThread)from semantic_kernel.functions import kernel_functionfrom typing import Annotated# 2. Email plug-inclass EmailPlugin: @kernel_function(description="Sends email.") def send_email( self, to: Annotated[str, "Recipient"], subject: Annotated[str, "Subject"], body: Annotated[str, "Body"] ): print("\nTo:", to) print("Subject:", subject) print(body, "\n")async def process_expenses_data(expenses_data: str, prompt: str): # 3. Load .env settings load_dotenv() ai_agent_settings = AzureAIAgentSettings() # 4. Connect Azure AI Foundry project async ( DefaultAzureCredential( exclude_environment_credential=True, exclude_managed_identity_credential=True ) creds, AzureAIAgent.create_client(credential=creds) project_client, ): # 5. Define Azure AI agent e-mails claim agent_def = await project_client.agents.create_agent( model=ai_agent_settings.model_deployment_name, name="expenses_agent", instructions=""" You AI assistant expense claim submission. When user requests expense claim, email subject 'Expense Claim', itemised list, total. Then confirm user done so. """ ) # 6. Create Semantic Kernel agent agent = AzureAIAgent( client=project_client, definition=agent_def, plugins=[EmailPlugin()] ) # 7. Run agent thread = AzureAIAgentThread(client=project_client) try: prompt_messages = [f"{prompt}: {expenses_data}"] response = await agent.get_response( thread_id=thread.id, messages=prompt_messages ) print(f"\n# {response.name}:\n{response}") finally: await thread.delete() await project_client.agents.delete_agent(agent.id)## Run applicationpythonaz loginpython semantic-kernel.py