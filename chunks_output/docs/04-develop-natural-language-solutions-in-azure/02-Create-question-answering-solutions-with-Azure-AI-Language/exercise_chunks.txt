[H1] Azure AI Language - Question Answering Solution## ProblemYou need provide automated question-answering support using large FAQ knowledge base. Static FAQ pages hard search, especially number Q&A pairs grows.## Solution AzureUseCustom Question Answeringfeature Azure AI Language build knowledge base queried using natural language. The service allows integration bots custom applications real-time Q&A.## Required Components- Azure AI Language resource (with Custom Question Answering enabled)- Azure AI Search resource (same global region)- Language Studio- Knowledge base sources (e.g., URL, documents, chit-chat sets)- Deployment name project name- SDK (azure-ai-language-questionanswering Python/C#)- VS Code app development## Architecture & Development### 1. Provision AI Language + Azure Search Resources- Create Language Service Azure- Enable Custom Question Answering- Select region Azure Search- Pricing tier: F0 (free) S- Retrieve endpoint subscription key Keys Endpoint### 2. Create
Search Resources- Create Language Service Azure- Enable Custom Question Answering- Select region Azure Search- Pricing tier: F0 (free) S- Retrieve endpoint subscription key Keys Endpoint### 2. Create Question Answering Project Language Studio- Go to: Select Custom question answering- Set language (English), project name (e.g. LearnFAQ), default fallback answer- Complete wizard### 3. Add Sources Knowledge BaseAdd FAQ URL:Chit-chat dataset:FriendlyEdit KB:- Add Q: What Microsoft credentials?- A: Microsoft credentials enable validate prove skills...- Add alternate question: How I demonstrate Microsoft technology skills?- Add follow-up prompt link to: Show contextual flow only### 4. Train Test Knowledge BaseClickSave,Test*Sample test queries:*- "Hello" chit-chat- "What Microsoft Learn?" FAQ- "Tell Microsoft credentials" custom Q&A### 5. Deploy Knowledge Base- In Language Studio, clickDeploy- After success, clickGet prediction URL- Note projectName deploymentName (e.g., LearnFAQ,
FAQ- "Tell Microsoft credentials" custom Q&A### 5. Deploy Knowledge Base- In Language Studio, clickDeploy- After success, clickGet prediction URL- Note projectName deploymentName (e.g., LearnFAQ, production)### 6. Build Question Answering AppClone repo: to:-Labfiles/02-qna/CSharp/qna-appor-Labfiles/02-qna/Python/qna-appInstall SDK:*C#:*bashdotnet add package Azure.AI.Language.QuestionAnsweringPython:bashpip install azure-ai-language-questionanswering### 7. Configure AppOpen:-.envPython-appsettings.jsonC#Set:-ai_key-ai_endpoint-project_name-deployment_name### 8. Implement Q&A LogicPython:pythonfrom azure.core.credentials import AzureKeyCredentialfrom azure.ai.language.questionanswering import QuestionAnsweringClientcredential = AzureKeyCredential(ai_key)ai_client = QuestionAnsweringClient(endpoint=ai_endpoint, credential=credential)while True: user_question = input("Question:\n") user_question.lower() == "quit": break response = ai_client.get_answers( question=user_question,
credential=credential)while True: user_question = input("Question:\n") user_question.lower() == "quit": break response = ai_client.get_answers( question=user_question, project_name=ai_project_name, deployment_name=ai_deployment_name ) candidate response.answers: print(candidate.answer) print("Confidence:", candidate.confidence) print("Source:", candidate.source)C#:csharpusing Azure;using Azure.AI.Language.QuestionAnswering;AzureKeyCredential credentials = new AzureKeyCredential(aiSvcKey);Uri endpoint = new Uri(aiSvcEndpoint);QuestionAnsweringClient aiClient = new QuestionAnsweringClient(endpoint, credentials);string user_question = "";while (true){ Console.Write("Question: "); user_question = Console.ReadLine(); (user_question.ToLower() == "quit") break; QuestionAnsweringProject project = new QuestionAnsweringProject(projectName, deploymentName); var response = aiClient.GetAnswers(user_question, project); foreach (var answer response.Value.Answers) { Console.WriteLine(answer.Answer);
new QuestionAnsweringProject(projectName, deploymentName); var response = aiClient.GetAnswers(user_question, project); foreach (var answer response.Value.Answers) { Console.WriteLine(answer.Answer); Console.WriteLine($"Confidence: {answer.Confidence:P2}"); Console.WriteLine($"Source: {answer.Source}"); }}Run with:-dotnet run(C#)-python qna-app.py(Python)## Best Practices & Considerations- Use chit-chat datasets handle casual messages- Enable multi-turn prompts refinement- Deploy production thorough testing- Use alternate questions improve matching- Test edge cases answer returned- Configure fallback responses thoughtfully## Sample Exam QuestionsQ: Which Azure service used create searchable Q&A knowledge base?Azure AI Language - Custom Question AnsweringQ: What required support Custom Question Answering indexing?Azure AI SearchQ: How handle multiple ways asking question?Use alternate questions knowledge baseQ: What enables follow-up questions Q&A projects?Multi-turn promptsQ: Where
Answering indexing?Azure AI SearchQ: How handle multiple ways asking question?Use alternate questions knowledge baseQ: What enables follow-up questions Q&A projects?Multi-turn promptsQ: Where define project deployment name?** In deployment settings application config files
